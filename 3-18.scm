(define (append! x y)
  (set-cdr! (last-pair x) y) 
  x)

(define (last-pair x)
  (if (null? (cdr x))
    x
    (last-pair (cdr x))))

(define (make-cycle x)
  (set-cdr! (last-pair x) x)
  x)

(define (counted? x pairs)
  (cond ((null? pairs) #f)
        ((eq? x (car pairs)) #t)
        (else (counted? x (cdr pairs)))))

(define (does-contain-cycle? x)
  (define counted-pairs '())
  (define (append-to-counted-pairs x)
    (if (null? counted-pairs)
      (set! counted-pairs (cons x '()))
      (append! counted-pairs (cons x '()))))
  (define (iter x)
    (cond ((null? (cdr x)) #f)
          ((counted? x counted-pairs) #t)
          (else (begin (append-to-counted-pairs x)
                       (iter (cdr x))))))
  (iter x))
