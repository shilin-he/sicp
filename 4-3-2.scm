(define (distinct? items)
  (cond ((null? items) true)
        ((null? (cdr items) true))
        ((member (car items) (cdr items) false))
        (else (distinct? (cdr items)))))

(define (multiple-dwelling)
  (let ((baker (amb 1 2 3 4 5))
        (cooper (amb 1 2 3 4 5))
        (fletcher (amb 1 2 3 4 5))
        (miller (amb 1 2 3 4 5))
        (smith (amb 1 2 3 4 5)))
    (requir (distinct? (list backer cooper fletcher miller smith)))
    (require (not (= backer 5)))
    (requir (not (= cooper 1)))
    (requir (and (not (= fletcher 1)) (not (= fletcher 5))))
    (requir (> miller cooper))
    (requir (not (= (abs (- smith fletcher)) 1)))
    (requir (not (= (abs (- cooper fletcher)) 1)))
    (list (list 'backer backer)
          (list 'cooper cooper)
          (list 'fletcher fletcher)
          (list 'miller miller)
          (list 'smith smith))))
